# ==============================================
# DOCKER COMPOSE SECURITY OVERLAY
# ==============================================
# This file provides security enhancements for docker-compose.yml
# Usage: docker-compose -f docker-compose.yml -f docker-compose.security.yml up
#
# Security Features:
# 1. Network Isolation (frontend, backend, hadoop)
# 2. Environment Variable Security (.env file)
# 3. Docker Secrets for sensitive data
# 4. Resource Limits
# 5. Security Options
# ==============================================

# Define isolated networks
networks:
  frontend:
    driver: bridge
    name: traffic-frontend
    ipam:
      config:
        - subnet: 172.25.0.0/24
    driver_opts:
      com.docker.network.bridge.name: br-frontend
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
  
  backend:
    driver: bridge
    name: traffic-backend
    internal: false  # Set to true in production to block external access
    ipam:
      config:
        - subnet: 172.26.0.0/24
    driver_opts:
      com.docker.network.bridge.name: br-backend
      com.docker.network.bridge.enable_icc: "true"
  
  hadoop:
    driver: bridge
    name: traffic-hadoop
    internal: false  # Set to true in production
    ipam:
      config:
        - subnet: 172.27.0.0/24
    driver_opts:
      com.docker.network.bridge.name: br-hadoop

# Docker Secrets (for production use)
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  jwt_secret_key:
    file: ./secrets/jwt_secret_key.txt
  jwt_refresh_secret_key:
    file: ./secrets/jwt_refresh_secret_key.txt

services:
  # ==============================================
  # PUBLIC-FACING SERVICES (Frontend Network)
  # ==============================================
  
  backend:
    networks:
      - frontend  # Exposed to external traffic
      - backend   # Access to database and Kafka
    secrets:
      - postgres_password
      - jwt_secret_key
      - jwt_refresh_secret_key
    environment:
      # Override with environment variables from .env
      POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_DB: ${POSTGRES_DB:-traffic_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      # Remove POSTGRES_PASSWORD - use Docker secret
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      ASYNC_DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      
      # JWT Configuration from .env
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_REFRESH_SECRET_KEY: ${JWT_REFRESH_SECRET_KEY}
      JWT_ALGORITHM: ${JWT_ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-15}
      REFRESH_TOKEN_EXPIRE_DAYS: ${REFRESH_TOKEN_EXPIRE_DAYS:-7}
      
      # API Configuration
      API_HOST: ${API_HOST:-0.0.0.0}
      API_PORT: ${API_PORT:-8000}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-True}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # Security Settings
      RATE_LIMIT_PER_MINUTE: ${RATE_LIMIT_PER_MINUTE:-100}
      RATE_LIMIT_PER_HOUR: ${RATE_LIMIT_PER_HOUR:-1000}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:8000}
      
      # Kafka Configuration
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS:-kafka-broker1:9092}
      KAFKA_SCHEMA_REGISTRY_URL: ${KAFKA_SCHEMA_REGISTRY_URL:-http://schema-registry:8081}
    
    # Security Options
    security_opt:
      - no-new-privileges:true
    
    # Resource Limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # Read-only root filesystem (uncomment for production)
    # read_only: true
    # tmpfs:
    #   - /tmp
    #   - /var/run
  
  # ==============================================
  # INTERNAL SERVICES (Backend Network Only)
  # ==============================================
  
  postgres:
    networks:
      - backend  # Only accessible from backend network
    secrets:
      - postgres_password
    environment:
      # Use Docker secret for password in production
      # POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-casa1234}
      POSTGRES_DB: ${POSTGRES_DB:-traffic_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
    
    security_opt:
      - no-new-privileges:true
    
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
  
  # ==============================================
  # KAFKA ECOSYSTEM (Backend Network)
  # ==============================================
  
  zookeeper:
    networks:
      - backend
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
  
  kafka-broker1:
    networks:
      - backend
    environment:
      # Add security configuration from .env
      KAFKA_SECURITY_PROTOCOL: ${KAFKA_SECURITY_PROTOCOL:-PLAINTEXT}
      KAFKA_SASL_MECHANISM: ${KAFKA_SASL_MECHANISM:-PLAIN}
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
  
  schema-registry:
    networks:
      - backend
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
  
  kafka-connect:
    networks:
      - backend
      - hadoop  # Needs access to HDFS
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
  
  # ==============================================
  # HADOOP ECOSYSTEM (Hadoop Network)
  # ==============================================
  
  namenode:
    networks:
      - hadoop
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
  
  datanode:
    networks:
      - hadoop
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
  
  resourcemanager:
    networks:
      - hadoop
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
  
  nodemanager:
    networks:
      - hadoop
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
  
  historyserver:
    networks:
      - hadoop
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
  
  hive-metastore-postgresql:
    networks:
      - hadoop
    environment:
      POSTGRES_PASSWORD: ${HIVE_METASTORE_PASSWORD:-hive_metastore}
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
  
  hive-metastore:
    networks:
      - hadoop
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
  
  hbase-master:
    networks:
      - hadoop
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
  
  hbase-regionserver:
    networks:
      - hadoop
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G

# ==============================================
# USAGE INSTRUCTIONS
# ==============================================
# 1. Create .env file from .env.template
# 2. Generate strong passwords and JWT secrets
# 3. Create secrets directory: mkdir secrets
# 4. Create secret files:
#    echo "your_password" > secrets/postgres_password.txt
#    openssl rand -hex 32 > secrets/jwt_secret_key.txt
#    openssl rand -hex 32 > secrets/jwt_refresh_secret_key.txt
# 5. Start services:
#    docker-compose -f docker-compose.yml -f docker-compose.security.yml up -d
# 6. For production, set internal: true for backend and hadoop networks
# ==============================================
