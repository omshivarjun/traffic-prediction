-- Migration: Create initial traffic prediction schema
-- Version: 001
-- Created: 2025-09-19T10:00:00

-- Create database extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "postgis";

-- Create schema for traffic prediction system
CREATE SCHEMA IF NOT EXISTS traffic;

-- Set search path to include our schema
SET search_path = traffic, public;

-- =====================================================
-- SENSORS TABLE
-- Stores information about traffic sensors/monitoring points
-- =====================================================
CREATE TABLE IF NOT EXISTS sensors (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    sensor_id VARCHAR(50) UNIQUE NOT NULL,
    location GEOGRAPHY(POINT, 4326) NOT NULL,
    road_name VARCHAR(255) NOT NULL,
    road_type VARCHAR(50) DEFAULT 'highway',
    direction VARCHAR(20) CHECK (direction IN ('north', 'south', 'east', 'west', 'northbound', 'southbound', 'eastbound', 'westbound')),
    lane_count INTEGER DEFAULT 1,
    speed_limit INTEGER DEFAULT 60,
    city VARCHAR(100),
    state VARCHAR(50),
    country VARCHAR(50) DEFAULT 'USA',
    installation_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    last_maintenance TIMESTAMP WITH TIME ZONE,
    status VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'inactive', 'maintenance')),
    metadata JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- =====================================================
-- TRAFFIC_READINGS TABLE
-- Stores real-time traffic measurements from sensors
-- =====================================================
CREATE TABLE IF NOT EXISTS traffic_readings (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    sensor_id UUID NOT NULL REFERENCES sensors(id) ON DELETE CASCADE,
    timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
    speed DECIMAL(5,2) CHECK (speed >= 0 AND speed <= 200),
    volume INTEGER CHECK (volume >= 0),
    occupancy DECIMAL(5,2) CHECK (occupancy >= 0 AND occupancy <= 100),
    density DECIMAL(8,2) CHECK (density >= 0),
    travel_time INTEGER CHECK (travel_time >= 0),
    weather_condition VARCHAR(50),
    visibility_km DECIMAL(4,1),
    temperature_c DECIMAL(4,1),
    humidity_percent DECIMAL(5,2),
    wind_speed_kmh DECIMAL(5,2),
    precipitation_mm DECIMAL(6,2),
    road_condition VARCHAR(30) CHECK (road_condition IN ('dry', 'wet', 'icy', 'snowy', 'construction')),
    incident_nearby BOOLEAN DEFAULT FALSE,
    quality_score DECIMAL(3,2) DEFAULT 1.0 CHECK (quality_score >= 0 AND quality_score <= 1),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- =====================================================
-- PREDICTIONS TABLE
-- Stores traffic predictions generated by ML models
-- =====================================================
CREATE TABLE IF NOT EXISTS predictions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    sensor_id UUID NOT NULL REFERENCES sensors(id) ON DELETE CASCADE,
    prediction_timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
    horizon_minutes INTEGER NOT NULL CHECK (horizon_minutes > 0),
    predicted_speed DECIMAL(5,2) CHECK (predicted_speed >= 0 AND predicted_speed <= 200),
    predicted_volume INTEGER CHECK (predicted_volume >= 0),
    predicted_travel_time INTEGER CHECK (predicted_travel_time >= 0),
    confidence_score DECIMAL(4,3) CHECK (confidence_score >= 0 AND confidence_score <= 1),
    model_name VARCHAR(100) NOT NULL,
    model_version VARCHAR(20) NOT NULL,
    features_used JSONB,
    prediction_interval_lower DECIMAL(5,2),
    prediction_interval_upper DECIMAL(5,2),
    actual_speed DECIMAL(5,2),
    actual_volume INTEGER,
    prediction_error DECIMAL(8,4),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- =====================================================
-- MODEL_METRICS TABLE
-- Stores model performance metrics and evaluation results
-- =====================================================
CREATE TABLE IF NOT EXISTS model_metrics (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    model_name VARCHAR(100) NOT NULL,
    model_version VARCHAR(20) NOT NULL,
    evaluation_date TIMESTAMP WITH TIME ZONE NOT NULL,
    metric_type VARCHAR(50) NOT NULL,
    metric_value DECIMAL(10,6) NOT NULL,
    horizon_minutes INTEGER NOT NULL,
    sensor_count INTEGER,
    sample_size INTEGER,
    time_period_start TIMESTAMP WITH TIME ZONE,
    time_period_end TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- =====================================================
-- TRAFFIC_INCIDENTS TABLE
-- Stores traffic incidents that may affect predictions
-- =====================================================
CREATE TABLE IF NOT EXISTS traffic_incidents (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    incident_id VARCHAR(100) UNIQUE NOT NULL,
    location GEOGRAPHY(POINT, 4326) NOT NULL,
    incident_type VARCHAR(50) NOT NULL,
    severity VARCHAR(20) DEFAULT 'minor' CHECK (severity IN ('minor', 'moderate', 'major', 'severe')),
    description TEXT,
    start_time TIMESTAMP WITH TIME ZONE NOT NULL,
    end_time TIMESTAMP WITH TIME ZONE,
    affected_lanes INTEGER DEFAULT 0,
    road_name VARCHAR(255),
    direction VARCHAR(20),
    impact_radius_km DECIMAL(6,2) DEFAULT 1.0,
    status VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'resolved', 'pending')),
    source VARCHAR(50),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- =====================================================
-- CREATE INDEXES FOR OPTIMIZATION
-- =====================================================
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_sensors_sensor_id ON sensors(sensor_id);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_sensors_location ON sensors USING GIST(location);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_sensors_road_name ON sensors(road_name);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_sensors_status ON sensors(status);

CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_traffic_readings_sensor_timestamp ON traffic_readings(sensor_id, timestamp DESC);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_traffic_readings_timestamp ON traffic_readings(timestamp DESC);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_traffic_readings_sensor_id ON traffic_readings(sensor_id);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_traffic_readings_created_at ON traffic_readings(created_at DESC);

CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_predictions_sensor_timestamp ON predictions(sensor_id, prediction_timestamp DESC);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_predictions_timestamp ON predictions(prediction_timestamp DESC);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_predictions_model ON predictions(model_name, model_version);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_predictions_horizon ON predictions(horizon_minutes);

CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_model_metrics_model ON model_metrics(model_name, model_version);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_model_metrics_date ON model_metrics(evaluation_date DESC);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_model_metrics_type ON model_metrics(metric_type);

CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_incidents_location ON traffic_incidents USING GIST(location);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_incidents_time ON traffic_incidents(start_time, end_time);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_incidents_status ON traffic_incidents(status);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_incidents_type ON traffic_incidents(incident_type);

-- Composite indexes for common queries
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_traffic_readings_recent_by_sensor 
ON traffic_readings(sensor_id, timestamp DESC) 
WHERE timestamp > CURRENT_TIMESTAMP - INTERVAL '24 hours';

CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_predictions_recent_by_model 
ON predictions(model_name, prediction_timestamp DESC) 
WHERE prediction_timestamp > CURRENT_TIMESTAMP - INTERVAL '7 days';

-- =====================================================
-- CREATE TRIGGERS AND FUNCTIONS
-- =====================================================
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_sensors_updated_at BEFORE UPDATE ON sensors
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_incidents_updated_at BEFORE UPDATE ON traffic_incidents
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- =====================================================
-- CREATE VIEWS
-- =====================================================
CREATE OR REPLACE VIEW recent_traffic_readings AS
SELECT 
    tr.id,
    s.sensor_id,
    s.road_name,
    tr.timestamp,
    tr.speed,
    tr.volume,
    tr.occupancy,
    tr.weather_condition,
    tr.quality_score
FROM traffic_readings tr
JOIN sensors s ON tr.sensor_id = s.id
WHERE tr.timestamp > CURRENT_TIMESTAMP - INTERVAL '24 hours'
  AND s.status = 'active';

CREATE OR REPLACE VIEW current_predictions AS
SELECT 
    p.id,
    s.sensor_id,
    s.road_name,
    p.prediction_timestamp,
    p.horizon_minutes,
    p.predicted_speed,
    p.predicted_volume,
    p.confidence_score,
    p.model_name
FROM predictions p
JOIN sensors s ON p.sensor_id = s.id
WHERE p.prediction_timestamp BETWEEN CURRENT_TIMESTAMP 
  AND CURRENT_TIMESTAMP + INTERVAL '6 hours'
  AND s.status = 'active';

CREATE OR REPLACE VIEW active_incidents AS
SELECT 
    incident_id,
    incident_type,
    severity,
    description,
    start_time,
    road_name,
    direction,
    impact_radius_km
FROM traffic_incidents
WHERE status = 'active'
  AND (end_time IS NULL OR end_time > CURRENT_TIMESTAMP);

-- Set default schema for future connections
ALTER DATABASE traffic_db SET search_path = traffic, public;

-- DOWN
-- Rollback SQL for migration 001

DROP VIEW IF EXISTS active_incidents;
DROP VIEW IF EXISTS current_predictions;
DROP VIEW IF EXISTS recent_traffic_readings;

DROP TRIGGER IF EXISTS update_incidents_updated_at ON traffic_incidents;
DROP TRIGGER IF EXISTS update_sensors_updated_at ON sensors;

DROP FUNCTION IF EXISTS update_updated_at_column();

DROP INDEX IF EXISTS idx_predictions_recent_by_model;
DROP INDEX IF EXISTS idx_traffic_readings_recent_by_sensor;
DROP INDEX IF EXISTS idx_incidents_type;
DROP INDEX IF EXISTS idx_incidents_status;
DROP INDEX IF EXISTS idx_incidents_time;
DROP INDEX IF EXISTS idx_incidents_location;
DROP INDEX IF EXISTS idx_model_metrics_type;
DROP INDEX IF EXISTS idx_model_metrics_date;
DROP INDEX IF EXISTS idx_model_metrics_model;
DROP INDEX IF EXISTS idx_predictions_horizon;
DROP INDEX IF EXISTS idx_predictions_model;
DROP INDEX IF EXISTS idx_predictions_timestamp;
DROP INDEX IF EXISTS idx_predictions_sensor_timestamp;
DROP INDEX IF EXISTS idx_traffic_readings_created_at;
DROP INDEX IF EXISTS idx_traffic_readings_sensor_id;
DROP INDEX IF EXISTS idx_traffic_readings_timestamp;
DROP INDEX IF EXISTS idx_traffic_readings_sensor_timestamp;
DROP INDEX IF EXISTS idx_sensors_status;
DROP INDEX IF EXISTS idx_sensors_road_name;
DROP INDEX IF EXISTS idx_sensors_location;
DROP INDEX IF EXISTS idx_sensors_sensor_id;

DROP TABLE IF EXISTS traffic_incidents;
DROP TABLE IF EXISTS model_metrics;
DROP TABLE IF EXISTS predictions;
DROP TABLE IF EXISTS traffic_readings;
DROP TABLE IF EXISTS sensors;

DROP SCHEMA IF EXISTS traffic CASCADE;

DROP EXTENSION IF EXISTS "postgis";
DROP EXTENSION IF EXISTS "uuid-ossp";